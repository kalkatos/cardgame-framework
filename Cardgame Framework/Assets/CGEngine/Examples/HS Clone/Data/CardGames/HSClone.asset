%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5d3cdce60015f2f41b00199fab41ec82, type: 3}
  m_Name: HSClone
  m_EditorClassIdentifier: 
  cardgameID: HSClone
  gameVariableNames:
  - HPP1
  - HPP2
  - ManaP1
  - MaxManaP1
  - ManaP2
  - MaxManaP2
  - ActivePlayer
  - ActivePlayerChanged
  - OtherPlayer
  - Attacker
  gameVariableValues:
  - 30
  - 30
  - 0
  - 0
  - 0
  - 0
  - P1
  - 0
  - P2
  - 0
  cardsets: []
  rulesets:
  - rulesetID: Main
    description: 
    turnStructure: Main
    rulesetVariableNames: []
    rulesetVariableValues: []
    matchRules:
    - ruleID: InitialSetup
      tags: 
      trigger: OnMatchStarted
      condition: 
      commands: 'AddTagToCard(c(z:Deck&P1),P1);

        AddTagToCard(c(z:Deck&P2),P2);

        MoveCardToZone(c(z:Deck&P1,x:3),z(t:Hand&P1));

        MoveCardToZone(c(z:Deck&P2,x:3),z(t:Hand&P2))'
    - ruleID: DrawCard
      tags: 
      trigger: OnTurnStarted
      condition: $turnNumber>1
      commands: MoveCardToZone(c(z:Deck&$ActivePlayer,x:1),z(t:Hand&$ActivePlayer))
    - ruleID: TurnSetup
      tags: 
      trigger: OnTurnStarted
      condition: 
      commands: 'SetVariable(ActivePlayerChanged,0);

        SetVariable(MaxMana$ActivePlayer,+1);

        SetVariable(Mana$ActivePlayer,$MaxMana$ActivePlayer);

        AddTagToCard(c(z:Play&$ActivePlayer),CanBeUsed);

        AddTagToCard(c(z:Play&$ActivePlayer),CanAttack);

        AddTagToCard(c(z:Hand&$ActivePlayer,f:Cost<=Mana$ActivePlayer),CanBeUsed)'
    - ruleID: PlayMinion
      tags: 
      trigger: OnZoneUsed
      condition: $usedZone=z(t:Play&ActivePlayer) & $usedCard=c(z:Hand,t:Minion&CanBeUsed)
      commands: 'SetVariable(Mana$ActivePlayer,+-cf(Cost,i:$usedCard));

        MoveCardToZone(c(i:$usedCard),z(i:$usedZone));

        RemoveTagFromCard(c(i:$usedCard),CanBeUsed);

        AddTagToCard(c(i:$usedCard),JustSummoned);

        SendMessage(CardPlayed)'
    - ruleID: SetAttacker
      tags: 
      trigger: OnCardUsed
      condition: $usedCard=c(z:Play&$ActivePlayer,t:Minion&CanAttack)
      commands: SetVariable(Attacker,$usedCard)
    - ruleID: MinionAttack
      tags: 
      trigger: OnZoneUsed
      condition: $usedZone=z(t:Face&$OtherPlayer) & $Attacker=$usedCard
      commands: 'RemoveTagFromCard(c(i:$Attacker),CanBeUsed);

        RemoveTagFromCard(c(i:$Attacker),CanAttack);

        SendMessage(MinionAttack);

        SetVariable(HP$OtherPlayer,+-cf(Attack,i:$Attacker));

        SetVariable(Attacker,0)'
    - ruleID: UpdateCanBePlayed
      tags: 
      trigger: OnMessageSent
      condition: $message=CardPlayed
      commands: 'RemoveTagFromCard(c(z:Hand&$ActivePlayer),CanBeUsed);

        AddTagToCard(c(z:Hand&$ActivePlayer,f:Cost<=Mana$ActivePlayer),CanBeUsed)'
    - ruleID: UpdatePossibilities
      tags: 
      trigger: OnMessageSent
      condition: nc(t:CanBeUsed)=0 & ($message=CardPlayed | $message=MinionAttack)
      commands: SendMessage(JobIsDone)
    - ruleID: EndTurn
      tags: 
      trigger: OnActionUsed
      condition: $actionName=EndTurn
      commands: EndCurrentPhase
    - ruleID: ChangePlayerToP1
      tags: 
      trigger: OnTurnEnded
      condition: $ActivePlayer=P2 & $ActivePlayerChanged=0
      commands: 'SetVariable(ActivePlayer,P1);

        SetVariable(OtherPlayer,P2);

        SetVariable(ActivePlayerChanged,1)'
    - ruleID: ChangePlayerToP2
      tags: 
      trigger: OnTurnEnded
      condition: $ActivePlayer=P1 & $ActivePlayerChanged=0
      commands: 'SetVariable(ActivePlayer,P2);

        SetVariable(OtherPlayer,P1);

        SetVariable(ActivePlayerChanged,1)'
    - ruleID: Cleanup
      tags: 
      trigger: OnTurnEnded
      condition: 
      commands: 'RemoveTagFromCard(allcards,CanBeUsed);

        RemoveTagFromCard(allcards,JustSummoned)'
